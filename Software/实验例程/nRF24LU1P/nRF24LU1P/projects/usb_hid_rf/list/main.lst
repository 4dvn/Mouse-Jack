C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE OBJECTADVANCED REGFILE(.\build\usb_hid_rf.ORC) BROWSE NOINTPRO
                    -MOTE INCDIR(..\..\hal;..\..\hal\nrf24l01p;..\..\hal\nrf24lu1p;..\..\compiler\c51;..\..\compiler\common;..\common) PRINT(
                    -.\list\main.lst) TABS(2) OBJECT(.\build\main.obj)

line level    source

   1          /****************************************Copyright (c)****************************************************
   2          **                                        
   3          **                                 
   4          **
   5          **--------------File Info---------------------------------------------------------------------------------
   6          ** File name:     main.c
   7          ** Last modified  Date:          
   8          ** Last Version:  1.0
   9          ** Descriptions:    
  10          **            
  11          **--------------------------------------------------------------------------------------------------------
  12          ** Created by:      FiYu
  13          ** Created date:    2014-8-5
  14          ** Version:         1.0
  15          ** Descriptions:    USB HID Œﬁœﬂ ’∑¢ ˝æ› µ—È≥Ã–Ú£
  16          **                  Õ®π˝USB HID≈‰÷√nRF24LU1PµƒŒﬁœﬂ≤Œ ˝:Œﬁœﬂ–≈µ¿∫ÕΩ” ’ ˝æ›≥§∂»
  17          **                  Ω” ’∑¢…‰∂ÀµƒŒﬁœﬂ–≈œ¢£¨Õ®π˝USB HID…œ¥´
  18          **                  Õ®π˝USB HIDΩ´–≈œ¢∑¢ÀÕ∏¯nRF24LU1P
  19          **                  
  20          **--------------------------------------------------------------------------------------------------------
  21          ** Modified by:     
  22          ** Modified date:   
  23          ** Version:       
  24          ** Descriptions:    
  25          **
  26          ** Rechecked by:      
  27          **********************************************************************************************************
             -/
  28          #include "nrf24lu1p.h"
  29          #include <stdint.h>
  30          #include <stdbool.h>
  31          #include <string.h>
  32          #include "hal_nrf.h"
  33          #include "hal_usb.h"
  34          #include "hal_usb_hid.h"
  35          #include "usb_map.h"
  36          #include "hal_flash.h"
  37          #include "hal_delay.h"
  38          
  39          
  40          /*-----------------------------------------------------------------------------
  41          ** ƒ⁄≤ø∫Í∂®“Â
  42          -----------------------------------------------------------------------------*/
  43          #define USB_IN_CMD usb_in_buf[0]
  44          #define USB_OUT_CMD usb_out_buf[0]
  45          #define USB_CONFIGRF_CH usb_out_buf[1]
  46          #define USB_CONFIGRF_LEN usb_out_buf[2]
  47          #define ERROR_CODE usb_in_buf[1]
  48          
  49          #define RF_OUT_CMD rf_out_buf[0]
  50          #define RF_IN_CMD rf_in_buf[0]
  51          
  52          #define SEND_USB() app_send_usb_in_data(0, 0)
C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 2   

  53          #define FORWARD_RF_TO_USB() app_send_usb_in_data(rf_in_buf, 32)
  54          
  55          
  56          /*-----------------------------------------------------------------------------
  57          ** USBœ‡πÿ±‰¡ø∂®“Â
  58          -----------------------------------------------------------------------------*/
  59          static xdata uint8_t usb_in_buf[EP1_2_PACKET_SIZE];
  60          static xdata uint8_t usb_out_buf[EP1_2_PACKET_SIZE];
  61          static bool xdata app_usb_out_data_ready = false;
  62          extern code const usb_string_desc_templ_t g_usb_string_desc;
  63          static bool xdata app_pending_usb_write = false;
  64          
  65          /*-----------------------------------------------------------------------------
  66          ** RFœ‡πÿ±‰¡ø∂®“Â
  67          -----------------------------------------------------------------------------*/
  68          static uint8_t xdata rf_in_buf[32];
  69          static uint8_t xdata rf_out_buf[32];
  70          static bool xdata packet_received = false;
  71          static bool xdata radio_busy = false;
  72          static bool xdata transmitted = false;
  73          uint8_t cmd = 0;
  74          
  75          
  76          
  77          //-----------------------------------------------------------------------------
  78          // Internal function prototypes
  79          //-----------------------------------------------------------------------------
  80          static void app_send_usb_in_data(uint8_t * buf, uint8_t size);
  81          static void app_parse_usb_out_packet();
  82          static void app_wait_while_usb_pending();
  83          static void rf_config(void);
  84          
  85          /*-----------------------------------------------------------------------------
  86          ** USBªÿµ˜∫Ø ˝…˘√˜
  87          -----------------------------------------------------------------------------*/
  88          hal_usb_dev_req_resp_t device_req_cb(hal_usb_device_req* req, uint8_t** data_ptr, uint8_t* size) large ree
             -ntrant;
  89          void suspend_cb(uint8_t allow_remote_wu) large reentrant;
  90          void resume_cb() large reentrant;
  91          void reset_cb() large reentrant;
  92          uint8_t ep_1_in_cb(uint8_t *adr_ptr, uint8_t* size) large reentrant;
  93          uint8_t ep_2_out_cb(uint8_t *adr_ptr, uint8_t* size) large reentrant;
  94          
  95          /*******************************************************************************************************
  96           * √Ë   ˆ : MAIN∫Ø ˝
  97           * »Î  ≤Œ : none
  98           * ∑µªÿ÷µ : none
  99           *******************************************************************************************************/
 100          void main()
 101          {
 102   1        // USB HAL initialization
 103   1        hal_usb_init(true, device_req_cb, reset_cb, resume_cb, suspend_cb);   
 104   1        hal_usb_endpoint_config(0x81, EP1_2_PACKET_SIZE, ep_1_in_cb);  // Configure 32 byte IN endpoint 1
 105   1        hal_usb_endpoint_config(0x02, EP1_2_PACKET_SIZE, ep_2_out_cb); // Configure 32 byte OUT endpoint 2
 106   1      
 107   1        
 108   1        rf_config();    // Œﬁœﬂ≈‰÷√
 109   1      
 110   1        P0DIR = 0xEF;   // ≈‰÷√P0:P04≈‰÷√Œ™ ‰≥ˆ
 111   1        LED = 1;        // œ®√÷∏ æµ∆
 112   1      
 113   1        EA = 1;         //  πƒ‹»´æ÷÷–∂œ
C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 3   

 114   1      
 115   1        while(true)                                                                               
 116   1        {    
 117   2          if(hal_usb_get_state() == CONFIGURED)  // USB“—≈‰÷√?
 118   2          { 
 119   3            if(app_usb_out_data_ready)// USB Ω” ’µΩ÷˜ª˙∑¢ÀÕµƒ ˝æ›
 120   3            {
 121   4              app_parse_usb_out_packet();
 122   4              app_usb_out_data_ready = false;
 123   4            }
 124   3            if(packet_received == true) // Ω” ’µΩŒﬁœﬂ ˝æ›?
 125   3            {
 126   4              app_send_usb_in_data(rf_in_buf, 31);
 127   4              packet_received = false;
 128   4              LED = ~LED;
 129   4            }
 130   3          }
 131   2          if(cmd == CMD_CONFIG_RF)
 132   2          {
 133   3            CE_LOW(); // Enable receiver    
 134   3            hal_nrf_set_rf_channel(USB_CONFIGRF_CH);
 135   3            hal_nrf_set_rx_payload_width((int)HAL_NRF_PIPE0, USB_CONFIGRF_LEN);// Ω” ’ƒ£ Ωœ¬–Ë“™…Ë÷√ ˝æ›≥§∂»
 136   3            CE_HIGH(); // Enable receiver 
 137   3            cmd = CMD_IDLE;
 138   3            
 139   3          }
 140   2        }
 141   1      }
 142          
 143          //-----------------------------------------------------------------------------
 144          // Handle commands from Host application
 145          //-----------------------------------------------------------------------------
 146          static void app_parse_usb_out_packet()
 147          {
 148   1        switch(USB_OUT_CMD)
 149   1        {
 150   2          case CMD_CONFIG_RF:
 151   2            
 152   2            cmd = CMD_CONFIG_RF;
 153   2            break;
 154   2      
 155   2          case CMD_SENDTODEV:
 156   2            cmd = CMD_SENDTODEV;
 157   2            break;
 158   2          
 159   2      
 160   2          default:
 161   2            break;
 162   2        }
 163   1      }
 164          
 165          //-----------------------------------------------------------------------------
 166          // RF helper functions
 167          //-----------------------------------------------------------------------------
 168          
 169          // Initialize radio module
 170          static void rf_config(void)
 171          {
 172   1        // Enable radio SPI and clock
 173   1        RFCTL = 0x10;
 174   1        RFCKEN = 1;
 175   1        RF = 1;
C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 4   

 176   1        
 177   1        hal_nrf_set_rf_channel(RF_CHANNEL);
 178   1        hal_nrf_set_datarate(HAL_NRF_250KBPS);    // RFÀŸ¬ £∫250KBPS
 179   1        hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);  // CRC£∫16bits  
 180   1        hal_nrf_open_pipe(HAL_NRF_PIPE0,false);   // Open radio pipe(s) and enable/ disable auto acknowledge. 
 181   1        hal_nrf_set_rx_payload_width((int)HAL_NRF_PIPE0, RX_PAYLOAD_LEN);// Ω” ’ƒ£ Ωœ¬–Ë“™…Ë÷√ ˝æ›≥§∂»
 182   1      
 183   1        // Clear and flush radio state
 184   1        hal_nrf_get_clear_irq_flags();
 185   1        hal_nrf_flush_rx();
 186   1        hal_nrf_flush_tx();
 187   1      
 188   1        packet_received = false;
 189   1          
 190   1        hal_nrf_set_operation_mode(HAL_NRF_PRX);
 191   1        hal_nrf_set_power_mode(HAL_NRF_PWR_UP);// Power up radio
 192   1        CE_HIGH(); // Enable receiver 
 193   1      }
 194          
 195          
 196          // Interrupt handler for RF module
 197          /*******************************************************************************************************
 198           * √Ë   ˆ : RF÷–∂œ∑˛ŒÒ∫Ø ˝
 199           * »Î  ≤Œ : none
 200           * ∑µªÿ÷µ : none
 201           *******************************************************************************************************/
 202          NRF_ISR()
 203          {
 204   1        uint8_t irq_flags;
 205   1        // Read and clear IRQ flags from radio
 206   1        irq_flags = hal_nrf_get_clear_irq_flags();
 207   1      
 208   1        switch (irq_flags) 
 209   1        {
 210   2          // Transmission success.
 211   2          case (1 << (uint8_t)HAL_NRF_TX_DS):
 212   2            radio_busy = false;
 213   2            transmitted = true;
 214   2            break;
 215   2      
 216   2          // Transmission failed (maximum re-transmits)
 217   2          case (1 << (uint8_t)HAL_NRF_MAX_RT):
 218   2            hal_nrf_flush_tx();
 219   2            radio_busy = false;
 220   2            transmitted = false;
 221   2            break;
 222   2      
 223   2          // Data received 
 224   2          case (1 << (uint8_t)HAL_NRF_RX_DR):
 225   2            // Read payload
 226   2            while (!hal_nrf_rx_fifo_empty()) 
 227   2            { 
 228   3              hal_nrf_read_rx_payload(rf_in_buf);
 229   3            }
 230   2            packet_received = true;
 231   2            break;
 232   2      
 233   2        }
 234   1      }
 235          
 236          //-----------------------------------------------------------------------------
 237          // USB Helper functions
C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 5   

 238          //-----------------------------------------------------------------------------  
 239          
 240          /*******************************************************************************************************
 241           * √Ë   ˆ : USBœÚ÷˜ª˙∑¢ÀÕ ˝æ›
 242           * »Î  ≤Œ : buf£∫∑¢ÀÕª∫¥Ê ◊µÿ÷∑
 243           *          size£∫∑¢ÀÕ ˝æ›≥§∂»
 244           * ∑µªÿ÷µ : none
 245           *******************************************************************************************************/ 
             - 
 246          static void app_send_usb_in_data(uint8_t * buf, uint8_t size)
 247          {
 248   1        app_wait_while_usb_pending();
 249   1        app_pending_usb_write = true;  
 250   1        memcpy(usb_in_buf, buf, size);
 251   1        hal_usb_send_data(1, usb_in_buf, EP1_2_PACKET_SIZE);
 252   1      }
 253          
 254          
 255          static void app_wait_while_usb_pending()
 256          {    
 257   1        uint16_t timeout = 50000;   // Will equal ~ 50-100 ms timeout 
 258   1        while(timeout--)
 259   1        {
 260   2          if(!app_pending_usb_write)
 261   2          {
 262   3            break;
 263   3          }
 264   2        }    
 265   1      }
 266          
 267          //-----------------------------------------------------------------------------
 268          // USB Callbacks
 269          //-----------------------------------------------------------------------------  
 270          
 271          hal_usb_dev_req_resp_t device_req_cb(hal_usb_device_req* req, uint8_t** data_ptr, uint8_t* size) large ree
             -ntrant
 272          {
 273   1        hal_usb_dev_req_resp_t retval;
 274   1      
 275   1        if( hal_usb_hid_device_req_proc(req, data_ptr, size, &retval) == true ) 
 276   1        {
 277   2          // The request was processed with the result stored in the retval variable
 278   2          return retval;
 279   2        }
 280   1        else
 281   1        {
 282   2          // The request was *not* processed by the HID subsystem
 283   2          return STALL;   
 284   2        }
 285   1      }
 286          
 287          void suspend_cb(uint8_t allow_remote_wu) large reentrant
 288          {
 289   1        USBSLP = 1; // Disable USB clock (auto clear)
 290   1        allow_remote_wu = 0;  
 291   1      }
 292          
 293          void resume_cb(void) large reentrant
 294          {
 295   1      }
 296          
 297          void reset_cb(void) large reentrant
C51 COMPILER V9.52.0.0   MAIN                                                              07/07/2015 14:20:14 PAGE 6   

 298          {
 299   1      }
 300          
 301          //-----------------------------------------------------------------------------
 302          // USB Endpoint Callbacks
 303          //-----------------------------------------------------------------------------  
 304          uint8_t ep_1_in_cb(uint8_t *adr_ptr, uint8_t* size) large reentrant
 305          {  
 306   1        app_pending_usb_write = false;
 307   1        return 0x60; // NAK
 308   1        adr_ptr = adr_ptr;
 309   1        size = size;
 310   1      }
 311          
 312          uint8_t ep_2_out_cb(uint8_t *adr_ptr, uint8_t* size) large reentrant
 313          {
 314   1        memcpy(usb_out_buf, adr_ptr, *size);
 315   1        app_usb_out_data_ready = true;
 316   1        //P0 = *size;
 317   1        return 0xff; // ACK
 318   1      }
 319          
 320          /********************************************END FILE*****************************************************
             -/
*** WARNING C294 IN LINE 308 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    781    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    134       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
